package com.example.danshal.ui.admin

import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.viewModels
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.danshal.R
import com.example.danshal.databinding.AdminUsersFragmentBinding
import com.example.danshal.models.Address
import com.example.danshal.models.User
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseAuthException
import com.google.firebase.auth.ktx.auth
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase

class AdminUsersFragment : Fragment() {

    private var _binding: AdminUsersFragmentBinding? = null
    private val binding get() = _binding!!

    private lateinit var userAdapter: AdminUserAdapter
    private var users = arrayListOf<User>()
    private val adminUsersViewModel: AdminUsersViewModel by viewModels()

    private lateinit var auth: FirebaseAuth
    private val db = Firebase.firestore

    override fun onCreateView(
            inflater: LayoutInflater,
            container: ViewGroup?,
            savedInstanceState: Bundle?
    ): View {
        auth = Firebase.auth
        _binding = AdminUsersFragmentBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        userAdapter = AdminUserAdapter(users)

        observeUsers()
        initViews()

        binding.btnRegister.setOnClickListener {
            createUser(binding.etUsername.text.toString(), binding.etPassword.text.toString(), binding.switch1.showText)
        }
    }

    private fun observeUsers() {
        adminUsersViewModel.getUsers()

        adminUsersViewModel.users.observe(viewLifecycleOwner, {
            users.clear()
            users.addAll(it)
            userAdapter.notifyDataSetChanged()
        })

    }

    private fun initViews() {
        binding.rvUser.layoutManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)
        binding.rvUser.adapter = userAdapter
    }

    private fun createUser(email: String, password: String, admin: Boolean) {
        auth.createUserWithEmailAndPassword(email, password).addOnCompleteListener { task ->
            if (task.isSuccessful) {

                //Unique id generated by Firebase
                val id = auth.currentUser?.uid

                //Data inputfields
                val naam = binding.etName.text.toString()
                val adres: Address? = null
                val email = email
                val user = id?.let { User(naam, adres, email, adminUsersViewModel.profileIm, it, admin ) }
                // Add a new document with a generated ID
                user?.let {
                    db.collection("users")
                        .document(id)
                        .set(it)
                        .addOnSuccessListener { documentReference ->
                            Log.d("Cloud", "DocumentSnapshot added with ID: $documentReference")
                            Toast.makeText(context, "Account is geregistreed" , Toast.LENGTH_LONG)

                        }
                        .addOnFailureListener { e ->
                            if (e is FirebaseAuthException){
                                Toast.makeText(context, "Account is al bekend" , Toast.LENGTH_LONG)
                            }
                            Log.w("Cloud", "Error adding document", e)
                        }
                }
                Log.e("Task", "Succes")
            }else{
                Log.e("Task", "Failed..."+task.exception)
            }

        }
    }

}